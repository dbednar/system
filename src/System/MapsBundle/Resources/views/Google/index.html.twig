{% extends "::base.html.twig" %}
{% block title  %} Google Maps {% endblock %}
{% block content %}
    <div class="container-fluid" style="margin-top:10px;">
        <div class=" col-md-12" style="border:4px solid black;padding:0;background:white;">
            
                <div class="col-md-8">
                <div id="map"> </div>
                <div> Wpisz adres miejsca<input id="pac-input" class="controls" type="text" placeholder="Adres miejsca"> 
               </div>
            <div>
                Poziom zoomu:<span id="zoom_number"></span>/22  
            </div>
            <div id="tdCursor">
                Współrzendne geograficzne:<span id="lat"> </span> ,<span id="lng"> </span>
            </div>
            <div id="gps">
                
            </div>
                </div>
         
                <div class="col-md-4" id="geolocation_position" >
            
                    {% for mark in marks %}
                        <small>
                         <div>{{mark.title |capitalize}}
                             <p class="find_mark" data-latitude="{{mark.latitude}}" data-longitude="{{mark.longitude}}">B = {{mark.latitude}}, L= {{mark.longitude}} </p>
                            </div>
                        </small>
                    {% endfor %}
    
                </div>

            

        </div>	
    </div>

   {% include "::Modal/errorModal.html.twig" %} 
  
{% endblock %}
{% block javascript %}
    {{parent()}}
    <script>
       
        function initAutocomplete() {
            var originalMapCenter = new google.maps.LatLng(51.24645360, 22.56844630);
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 10,
                mapTypeId: 'roadmap',
                center: originalMapCenter,
                maxxZoom: 22,
            });

    //Show marker when click in google maps	

           


            var marker = new google.maps.Marker({
                map: map,
            });
            var locations = {{marks|json_encode|raw}};
         
             for (var i = 0; i < locations.length; i++) { 
           
             marker = new google.maps.Marker({
             position: new google.maps.LatLng(locations[i]['latitude'], locations[i]['longitude']),
             map: map,
   
             });}
 
            map.addListener('click', function (event) {

                var latitude = event.latLng.lat();
                var longitude = event.latLng.lng()

                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(latitude, longitude),
                    map: map,
                })
                if(typeof infowindow!== 'undefined'){
                    infowindow.close();
                }
                infowindow = new google.maps.InfoWindow({});
                $.ajax({
                    url: Routing.generate('add_geolocation'),
                    type: 'POST',
                    data: {'latitude':latitude, 'longitude':longitude,'title': 'Nawa markera'},
                    success: function (data) {
                        infowindow.close();
                        $('#geolocation_position').append("<small><div>Nazwa markera<p class='find_mark' data-latitude='"+latitude+"' data-longitude='"+longitude+"'>B ="+latitude +", L ="+longitude +"  </p></div></small>");
                     infowindow = new google.maps.InfoWindow({
                        content: data
                        });
                infowindow.open(map, marker);
                    },
                    error: function (xhr, desc, err) {
                        $('#errorModalDiallog').modal('show');
                    }   
                });

            
                $(".color").on('click', function () {
                    marker.setIcon('http://maps.google.com/mapfiles/ms/icons/' + $(this).attr('id') + '-dot.png');
                });
                $('#close').on("click", function () {
                    infowindow.close();
                });
                
            });
            marker.addListener('click', function () {
                map.setZoom(8);
                map.setCenter(marker.getPosition());
            });

    // End marker when click in google maps	
    //Start Show zoom in page
            $('#zoom_number').text(map.zoom);
            map.addListener('zoom_changed', function () {
                $('#zoom_number').text(map.getZoom());
            });
    //End Show zoom in page
    //Start show geographical coordinates 

            google.maps.event.addListener(map, 'mousemove', function (event) {
                displayCoordinates(event.latLng);
            });

            function displayCoordinates(pnt) {

                var lat = pnt.lat();
                lat = lat.toFixed(7);
                $('#lat').text("B = " + lat);
                var lng = pnt.lng();
                lng = lng.toFixed(7);
                $('#lng').html("L = " + lng);

                $('#gps').text(ddToDms(lat, lng));
            }
    //End Show geographical coordinates  

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);


            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {

                        return;
                    }


                    new google.maps.places.Autocomplete(
                            (document.getElementById('autocomplete')), {
                        types: ['geocode']
                    });
                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
    // conver to gps

    // This function returns the coordinate
    // conversion string in DD to DMS.
            function ddToDms(lat, lng) {

                var lat = lat;
                var lng = lng;
                var latResult, lngResult, dmsResult;

                // Make sure that you are working with numbers.
                // This is important in case you are working with values
                // from input text in HTML.
                lat = parseFloat(lat);
                lng = parseFloat(lng);

                // Check the correspondence of the coordinates for latitude: North or South.
                latResult = (lat >= 0) ? 'N' : 'S';

                // Call to getDms(lat) function for the coordinates of Latitude in DMS.
                // The result is stored in latResult variable.
                latResult += getDms(lat);

                // Check the correspondence of the coordinates for longitude: East or West.
                lngResult = (lng >= 0) ? 'E' : 'W';

                // Call to getDms(lng) function for the coordinates of Longitude in DMS.
                // The result is stored in lngResult variable.
                lngResult += getDms(lng);

                // Joining both variables and separate them with a space.
                dmsResult = latResult + ' ' + lngResult;

                // Return the resultant string.
                return dmsResult;
            }

    // Function that converts DMS to DD.
    // Taking as example the value -40.601203.
            function getDms(val) {

                // Required variables
                var valDeg, valMin, valSec, result;

                // Here you'll convert the value received in the parameter to an absolute value.
                // Conversion of negative to positive.
                // In this step does not matter if it's North, South, East or West,
                // such verification was performed earlier.
                val = Math.abs(val); // -40.601203 = 40.601203

                // ---- Degrees ----
                // Stores the integer of DD for the Degrees value in DMS
                valDeg = Math.floor(val); // 40.601203 = 40

                // Add the degrees value to the result by adding the degrees symbol "o".
                result = valDeg + "°"; // 40o

                // ---- Minutes ----
                // Removing the integer of the inicial value you get the decimal portion.
                // Multiply the decimal portion by 60.
                // Math.floor returns an integer discarding the decimal portion.
                // ((40.601203 - 40 = 0.601203) * 60 = 36.07218) = 36
                valMin = Math.floor((val - valDeg) * 60); // 36.07218 = 36

                // Add minutes to the result, adding the symbol minutes "'".
                result += valMin + "'"; // 40o36'

                // ---- Seconds ----
                // To get the value in seconds is required:
                // 1o - removing the degree value to the initial value: 40 - 40.601203 = 0.601203;
                // 2o - convert the value minutes (36') in decimal ( valMin/60 = 0.6) so
                // you can subtract the previous value: 0.601203 - 0.6 = 0.001203;
                // 3o - now that you have the seconds value in decimal,
                // you need to convert it into seconds of degree.
                // To do so multiply this value (0.001203) by 3600, which is
                // the number of seconds in a degree.
                // You get 0.001203 * 3600 = 4.3308
                // As you are using the function Math.round(),
                // which rounds a value to the next unit,
                // you can control the number of decimal places
                // by multiplying by 1000 before Math.round
                // and subsequent division by 1000 after Math.round function.
                // You get 4.3308 * 1000 = 4330.8 -> Math.round = 4331 -> 4331 / 1000 = 4.331
                // In this case the final value will have three decimal places.
                // If you only want two decimal places
                // just replace the value 1000 by 100.
                valSec = Math.round((val - valDeg - valMin / 60) * 3600 * 1000) / 1000; // 40.601203 = 4.331 

                // Add the seconds value to the result,
                // adding the seconds symbol " " ".
                result += valSec + '"'; // 40o36'4.331"

                // Returns the resulting string.
                return result;
            }

    //conver to gps		

        $('#geolocation_position').on('click','p',function(e){
                if(typeof infowindow!== 'undefined'){
                    infowindow.close();
                }
            var latitude = $(this).attr('data-latitude'),
                longitude  = $(this).attr('data-longitude');
     
         marker = new google.maps.Marker({
             position: new google.maps.LatLng(latitude, longitude),
             map: map,
   
             });
              map.setCenter(marker.getPosition());
             infowindow = new google.maps.InfoWindow({});
              $.ajax({
                    url: Routing.generate('add_geolocation'),
                    type: 'POST',
                    data: {'latitude':latitude, 'longitude':longitude,'title': 'Nawa markera'},
                    success: function (data) {
                     infowindow = new google.maps.InfoWindow({
                        content: data
                        });
                infowindow.open(map, marker);
                    },
                    error: function (xhr, desc, err) {
                        $('#errorModalDiallog').modal('show');
                    }   
                });
        });

        }
        
        
    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAgFAEa8dQCMNbTgYtxFt6Vnq8KaYn-Aas&libraries=places&callback=initAutocomplete">
    </script>

{% endblock %}    